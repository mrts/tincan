#ifndef PREPAREDSTATEMENT_H__
#define PREPAREDSTATEMENT_H__

#include "exceptions.h"
#include "declarations.h"

// don't depend on boost when using C++11
#if defined(__GXX_EXPERIMENTAL_CXX0X__) || (__cplusplus > 199711L)
  #include <memory>
#else
  #include <boost/smart_ptr/shared_ptr.hpp>
#endif

namespace tincan
{

// Will have Java ResultSet-like interface: while (r.next()) foo(r);
class RecordSet;

/** Interface for representing precompiled SQL statements.
 *
 * A SQL statement is precompiled and stored in a PreparedStatement object.
 * This object can then be used to efficiently execute this statement multiple
 * times.
 *
 * @throw SQLException
 */
class PreparedStatement
{
	INTERFACE(PreparedStatement)

public:
#if defined(__GXX_EXPERIMENTAL_CXX0X__) || (__cplusplus > 199711L)
    typedef std::shared_ptr<RecordSet>   recordset_ptr;
    typedef std::shared_ptr<PreparedStatement> ptr;
#else
    typedef boost::shared_ptr<RecordSet> recordset_ptr;
    typedef boost::shared_ptr<PreparedStatement> ptr;
#endif

    /** Bind value to the prepared statement at the given index.
     *
     * Supports int, double and std::string as of now.
     *
     * @throw SQLException
     */
    template<typename T>
	void bind(int parameterIndex, const T& val);

    /** Bind null to the prepared statement.
     *
     * @throw SQLException
     */
	virtual void bindNull(int parameterIndex) = 0;

    /** Reset the prepared statement object back to its initial state, ready
     * to be re-executed.
     *
     * Contrary to the intuition of many, any bound variables retain their
     * values.
     *
     * @throw SQLException
     */
    virtual void reset() = 0;

    /** Clear all bound parameters.
     *
     * @throw SQLException
     */
    virtual void clear() = 0;

    /** Execute the SQL query in this PreparedStatement object and return the
     * RecordSet object generated by the query.
     *
     * @return RecordSet object that contains the data produced
     * by the query; never null
     *
     * @throw SQLException
     */
    virtual recordset_ptr executeQuery() = 0;

    /** Execute a SQL Data Manipulation or Definition Language statement.
     *
     * @return either (1) the row count for DML statements or (2) 0 for
     * statements that return nothing
     *
     * @throw SQLException
     */
    virtual int executeUpdate() = 0;
};

class PreparedStatementFactory
{
    FACTORY(PreparedStatementFactory)

public:
    static PreparedStatement::ptr create();
};

}

#endif /* PREPAREDSTATEMENT_H */
